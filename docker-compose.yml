version: '3.8'

# OrçamentosOnline - Docker Compose Configuration
# Version: 1.0
# CRONOS Agent - DevOps & Containerization
# Date: September 25, 2025

networks:
  orcamentos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  ssl_certs:
    driver: local

services:
  # ============================================================================
  # REVERSE PROXY & SSL TERMINATION
  # ============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: orcamentos-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ssl_certs:/etc/nginx/ssl
      - uploads_data:/var/www/uploads:ro
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================================================
  # BACKEND API SERVICE
  # ============================================================================
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
      target: development
    container_name: orcamentos-api
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js debugger port
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://orcamentos_user:${POSTGRES_PASSWORD}@postgres:5432/orcamentos
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_EXPIRES_IN=15m
      - JWT_REFRESH_EXPIRES_IN=7d
      - CORS_ORIGIN=http://localhost:3001
      - MAX_FILE_SIZE=10485760  # 10MB
      - UPLOAD_PATH=/uploads
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX=100
      - BCRYPT_ROUNDS=12
      - SESSION_SECRET=${SESSION_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=sa-east-1
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    volumes:
      - ./services/api:/app
      - /app/node_modules
      - uploads_data:/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # FRONTEND WEB SERVICE
  # ============================================================================
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      target: development
    container_name: orcamentos-frontend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://127.0.0.1:3000/api/v1
      - VITE_WS_URL=ws://127.0.0.1:3000
      - VITE_PUBLIC_DOMAIN=localhost:3001
      - VITE_APP_NAME=OrçamentosOnline
      - VITE_APP_VERSION=1.0.0
      - VITE_MAX_FILE_SIZE=10485760
      - VITE_SUPPORTED_FILE_TYPES=image/jpeg,image/png,image/gif,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.21
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # DATABASE SERVICE
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: orcamentos-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=orcamentos
      - POSTGRES_USER=orcamentos_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/database/init:/docker-entrypoint-initdb.d
      - ./services/database/backups:/backups
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.30
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orcamentos_user -d orcamentos"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: |
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h'

  # ============================================================================
  # CACHE & QUEUE SERVICE
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: orcamentos-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.40
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}

  # ============================================================================
  # DEVELOPMENT TOOLS
  # ============================================================================
  # Database Administration Tool (Development Only)
  adminer:
    image: adminer:4.8.1
    container_name: orcamentos-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=flat
    depends_on:
      - postgres
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.50
    profiles:
      - development

  # Redis Commander (Development Only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: orcamentos-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD}
      - HTTP_USER=admin
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD}
    depends_on:
      - redis
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.51
    profiles:
      - development

  # ============================================================================
  # MONITORING & OBSERVABILITY (Optional)
  # ============================================================================
  # Application Performance Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: orcamentos-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.60
    profiles:
      - monitoring

  # Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: orcamentos-grafana
    restart: unless-stopped
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - ./infrastructure/monitoring/grafana:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.61
    profiles:
      - monitoring

# ============================================================================
# ADDITIONAL COMPOSE CONFIGURATIONS
# ============================================================================

# Production override file: docker-compose.prod.yml
# Development override file: docker-compose.dev.yml
# Testing override file: docker-compose.test.yml