version: '3.8'

# Or√ßamentosOnline - Production Environment Override
# CRONOS Agent - Production-Optimized Configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
# Date: September 25, 2025

services:
  # ============================================================================
  # API SERVICE - PRODUCTION OPTIMIZATIONS
  # ============================================================================
  api:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - API_DOCS_ENABLED=false
      - NODE_OPTIONS=--max-old-space-size=2048
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      # Remove development volumes - use only uploads
      - uploads_data:/uploads
    command: npm start

  # ============================================================================
  # FRONTEND SERVICE - PRODUCTION OPTIMIZATIONS
  # ============================================================================
  frontend:
    build:
      target: production
    environment:
      - NODE_ENV=production
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes: []  # Remove development volumes
    command: npm run start

  # ============================================================================
  # POSTGRES - PRODUCTION CONFIGURATION
  # ============================================================================
  postgres:
    environment:
      - POSTGRES_DB=orcamentos_prod
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      # Use production volume
      - postgres_prod_data:/var/lib/postgresql/data
      - ./services/database/backups:/backups
    command: |
      postgres
      -c max_connections=200
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=2GB
      -c max_wal_size=8GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
      -c log_temp_files=0
      -c track_activities=on
      -c track_counts=on
      -c track_io_timing=on
      -c track_functions=all

  # ============================================================================
  # REDIS - PRODUCTION CONFIGURATION
  # ============================================================================
  redis:
    environment:
      - REDIS_MAXMEMORY=2gb
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - redis_prod_data:/data
      - ./infrastructure/redis/redis.prod.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD} --maxmemory 2gb

  # ============================================================================
  # NGINX - PRODUCTION CONFIGURATION
  # ============================================================================
  nginx:
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - uploads_data:/var/www/uploads:ro
    ports:
      - "80:80"
      - "443:443"

  # ============================================================================
  # PRODUCTION MONITORING
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: orcamentos-prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    volumes:
      - ./infrastructure/monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.60
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: orcamentos-grafana
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.61
    profiles:
      - monitoring

  # ============================================================================
  # LOG AGGREGATION
  # ============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: orcamentos-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.80
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    container_name: orcamentos-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    depends_on:
      - elasticsearch
    networks:
      orcamentos-network:
        ipv4_address: 172.20.0.81
    profiles:
      - logging

  # ============================================================================
  # SSL CERTIFICATE MANAGEMENT
  # ============================================================================
  certbot:
    image: certbot/certbot:latest
    container_name: orcamentos-certbot
    volumes:
      - ssl_certs:/etc/letsencrypt
      - ./infrastructure/certbot:/var/lib/letsencrypt
    command: |
      sh -c "
      certbot certonly --webroot --webroot-path=/var/lib/letsencrypt --email ${LETSENCRYPT_EMAIL} --agree-tos --no-eff-email -d infigital.net -d api.infigital.net &&
      while :; do sleep 12h & wait; certbot renew; done
      "
    profiles:
      - ssl

# ============================================================================
# PRODUCTION VOLUMES
# ============================================================================
volumes:
  postgres_prod_data:
    driver: local

  redis_prod_data:
    driver: local

  prometheus_data:
    driver: local

  grafana_data:
    driver: local

  elasticsearch_data:
    driver: local

# ============================================================================
# PRODUCTION SECRETS (SHOULD BE MANAGED EXTERNALLY)
# ============================================================================
secrets:
  postgres_password:
    external: true

  redis_password:
    external: true

  jwt_secret:
    external: true